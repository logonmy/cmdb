"""A ``schema`` is used to define the structure or the ``class`` of one kind of
entities.

A ``schema`` will have properties:
    * ``name`` is the name of the schema like ``test_schema``
    * ``timestamp`` is the last update time of this schema like ``123124123``
    * ``display`` is the diplay name of this schema like ``TEST_SCHEMA``
    * ``key`` is the key field of this schema like ``id``
    * ``description`` You know it's for what.
    * ``fields`` is a list of ``Field`` object stands for what kind of propertya ``entity`` based on this ``schema`` should  have.

"""
from __future__ import unicode_literals

import logging
from collections import namedtuple
from pprint import pformat

__author__ = "yuchen.huang"

LOG = logging.getLogger(__name__)

Field = namedtuple("Field", ["name", "display", "type", "required",
                             "unique", "multi", "ref", "description"])
"""
A ``Field`` should have properties:
    * ``name`` is the name of this field, like ``id``
    * ``display`` is the display name of this field, like `ID`
    * ``type`` is one of ``string``, ``long`` and ``double``
    * ``required`` indicates if this field must have some value.
    * ``unique`` indicates if all the values of this field should be unique.
    * ``multi`` indicates if this field is an array.
    * ``ref`` indicates the reference of this field to anther field.
    * ``description`` You knwo what.

"""


class Schema(object):

    def __init__(self, json_schema):
        try:
            self._name = json_schema["name"]
            self._display = json_schema["display"]
            self._key = json_schema["key"]
            self._version = json_schema["version"]
            self._description = json_schema["description"]
            self._timestamp = json_schema["timestamp"]
            self._fields = [Field(**field) for field in json_schema["fields"]]
        except KeyError as e:
            LOG.error("Schema can not read {property} from initialization.".
                      format(property=str(e)))
        self.check_is_schema(self)

    @property
    def name(self):
        return self._name

    @name.setter
    def name(self, value):
        self._name = value

    @property
    def timestamp(self):
        return self._timestamp

    @property
    def display(self):
        return self._display

    @display.setter
    def display(self, value):
        self._display = value

    @property
    def key(self):
        return self._key

    @key.setter
    def key(self, value):
        self._key = value

    @property
    def version(self):
        return self._version

    @property
    def description(self):
        return self._description

    @description.setter
    def description(self, value):
        self._description = value

    @property
    def fields(self):
        return self._fields

    def add_field(self, field):
        self.check_field(field)
        self.fields.append(field)

    def to_save_format(self):
        """
        Translate one schema object to ``dict`` format, which will be the
        structure it will be saved in CMDB.
        """
        return {
            "name": self._name,
            "display": self._display,
            "key": self._key,
            "description": self._description,
            "fields": [dict(field._asdict()) for field in self._fields]
        }

    def __repr__(self):
        return pformat(self.to_save_format())

    @staticmethod
    def check_field(field):
        """
        Check the type of each property of a ``field`` object.
        """
        # assert isinstance(field, Field)
        # assert isinstance(field.name, str)
        # assert isinstance(field.display, str)
        # assert field.type in ["string", "long", "double"]
        # assert isinstance(field.required, bool)
        # assert isinstance(field.unique, bool)
        # assert isinstance(field.multi, bool)
        # assert isinstance(field.ref, str)
        # assert isinstance(field.description, str)

    @classmethod
    def check_is_schema(cls, schema):
        """
        Check the type of each property of a ``schema`` object.
        """
        # assert isinstance(schema.name, str)
        # assert isinstance(schema.display, str)
        # assert isinstance(schema.key, str)
        # assert isinstance(schema.timestamp, int)
        # assert isinstance(schema.version, int)
        # assert isinstance(schema.description, (type(None), str))
        # assert isinstance(schema.fields, list)
        # for field in schema.fields:
        #         cls.check_field(field)
